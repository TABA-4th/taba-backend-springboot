# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle


name: CD

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  check_repo:
    runs-on: ubuntu-latest
    outputs:
      cd-skip: ${{ steps.check_repo.outputs.cd-skip-value }}
    steps:
      - uses: actions/checkout@v3
      - name: Check Repo
        run: |
          if [ "$GITHUB_REPOSITORY" != "YOUR_USER/YOUR_REPO_NAME" ]; then
            echo 'cd-skip-value=true' >> $GITHUB_OUTPUT
          else
            echo 'cd-skip-value=false' >> $GITHUB_OUTPUT
          fi

  skip-cd:
    needs: check_repo
    if: github.repository != 'TABA-4th/taba-backend-springboot'
    runs-on: ubuntu-latest
    steps:
      - name: Skip CD
        run: |
          echo "CD will be terminated soon..."
          exit 0

  build:
    runs-on: ubuntu-latest
    if: github.repository == 'TABA-4th/taba-backend-springboot'
    needs: check_repo
    environment: main
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Make test properties
      env:
        PROPERTIES: ${{ secrets.PROPERTIES_TEST }}
      run: |
        mkdir -p ./src/test/resources && cd "$_"
        touch ./application.yml
        echo $PROPERTIES | base64 --decode > application.yml
        
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build
        gradle-version: '7.6'

    - name: Docker build
      env:
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        REPO: ${{ secrets.DOCKER_TABA_SPRINGBOOT_REPO }}
      run: |
        docker build -t $USERNAME/$REPO:${GITHUB_SHA::7} .

    - name: Docker push
      env:
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        REPO: ${{ secrets.DOCKER_TABA_SPRINGBOOT_REPO }}
      run: |
        docker login -u $USERNAME -p $PASSWORD
        docker push $USERNAME/$REPO:${GITHUB_SHA::7}

    - name: SSH Remote Commands
      uses: appleboy/ssh-action@master
      env:
        USERNAME: ${{ secrets.DOCKER_USERNAME }}
        REPO: ${{ secrets.DOCKER_TABA_SPRINGBOOT_REPO }}
        VOLUME: ${{ secrets.TABA_SPRINGBOOT_DOCKER_VOLUME }}
      with:
        host: ${{ secrets.TABA_SPRINGBOOT_SERVER_HOST }}
        username: ubuntu
        key: ${{ secrets.TABA4_PRIVATE_PEM_KEY }}
        port: ${{ secrets.TABA_SPRINGBOOT_SERVER_PORT }}
        envs: GITHUB_SHA,USERNAME,REPO,VOLUME
        script: |
          docker pull $USERNAME/$REPO:${GITHUB_SHA::7}
          docker stop server
          docker tag $USERNAME/$REPO:${GITHUB_SHA::7} server
          docker run -it -d --rm -p 8081:8080 -v $VOLUME -e SPRING_CONFIG_LOCATION=/app/application.yml server
